#include "BOX.h"
#include "auxiliar.h"
#include "../Mesh.h"


#ifdef WIN32
#include <windows.h>
#else
#include <unistd.h>
#endif

#include <gl/glew.h>
#include <gl/gl.h>
#define SOLVE_FGLUT_WARNING
#include <gl/freeglut.h> 
#include <iostream>
#define GLM_FORCE_RADIANS
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <iostream>



//////////////////////////////////////////////////////////////
// Datos que se almacenan en la memoria de la CPU
//////////////////////////////////////////////////////////////

//Matrices
glm::mat4	proj = glm::mat4(1.0f);
glm::mat4	view = glm::mat4(1.0f);
glm::mat4	model = glm::mat4(1.0f);


//////////////////////////////////////////////////////////////
// Variables que nos dan acceso a Objetos OpenGL
//////////////////////////////////////////////////////////////
//Por definir
unsigned int vshader; 
unsigned int fshader;
unsigned int program;

//Variables Uniform 
int uModelViewMat;
int uModelViewProjMat; 
int uNormalMat; 

//Atributos 
int inPos; 
int inColor; 
int inNormal; 
int inTexCoord;

//Texturas Uniform
int uColorTex;
int uEmiTex;

//VAO 
unsigned int vao;

//VBOs que forman parte del objeto 
unsigned int posVBO; 
unsigned int colorVBO;
unsigned int normalVBO;
unsigned int texCoordVBO; 
unsigned int triangleIndexVBO;


//Texturas 
unsigned int colorTexId; 
unsigned int emiTexId;


//Malla cargada con assimp
Mesh* malla;


//Variables para la camara
float rotation = 0.0f;
glm::vec3 translation = glm::vec3(0.0f);

float mouseSensibility = 0.001f;
bool invertMouse = false;

float pitch = 0.0f, yaw = 0.0f;
float minYawAngle = 5 * 3.14159f / 180.0f;
float maxYawAngle = 175 * 3.14159f / 180.0f;

float cameraSpeed = 0.1f;

int oldX = 0;
int oldY = 0;

bool orbital = false;



//////////////////////////////////////////////////////////////
// Funciones auxiliares
//////////////////////////////////////////////////////////////
//!!Por implementar

//Declaración de CB
void renderFunc();
void resizeFunc(int width, int height);
void idleFunc();
void keyboardFunc(unsigned char key, int x, int y);
void mouseFunc(int button, int state, int x, int y);

//Funciones de inicialización y destrucción
void initContext(int argc, char** argv);
void initOGL();
void initShader(const char *vname, const char *fname);
void initObj();
void destroy();




//Carga el shader indicado, devuele el ID del shader
//!Por implementar
GLuint loadShader(const char *fileName, GLenum type);

//Crea una textura, la configura, la sube a OpenGL, 
//y devuelve el identificador de la textura 
//!!Por implementar
unsigned int loadTex(const char *fileName);


int main(int argc, char** argv)
{
	std::locale::global(std::locale("spanish"));// acentos ;)

	initContext(argc, argv);
	initOGL();
	initShader("../shaders_P3/shader.v1.vert", "../shaders_P3/shader.v1.frag");
	initObj();

	glutMainLoop();

	destroy();

	return 0;
}
	
//////////////////////////////////////////
// Funciones auxiliares 
void initContext(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitContextVersion(3, 3);
	glutInitContextProfile(GLUT_CORE_PROFILE);

	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("Prácticas GLSL");

	glewExperimental = GL_TRUE; GLenum err = glewInit();
	if (GLEW_OK != err)
	{
		std::cout << "Error: " << glewGetErrorString(err) << std::endl;
		exit(-1);
	}
	const GLubyte *oglVersion = glGetString(GL_VERSION);
	std::cout << "This system supports OpenGL Version: " << oglVersion << std::endl;

	glutReshapeFunc(resizeFunc);
	glutDisplayFunc(renderFunc);
	glutIdleFunc(idleFunc);
	glutKeyboardFunc(keyboardFunc);
	glutMouseFunc(mouseFunc);

}
void initOGL()
{
	glEnable(GL_DEPTH_TEST);
	glClearColor(0.76f, 0.117f, 0.337f, 0.0f);

	glFrontFace(GL_CCW); //Counter clock-wise
	glPolygonMode(GL_FRONT_AND_BACK, GL_FILL); //frontal y back
	glEnable(GL_CULL_FACE); //activa culling

	proj = glm::perspective(glm::radians(60.0f), 1.0f, 0.1f, 50.0f);
	view = glm::mat4(1.0f);
	view[3].z = -6;

}
void destroy()
{
	glDetachShader(program, vshader);
	glDetachShader(program, fshader);
	glDeleteShader(vshader);
	glDeleteShader(fshader);
	glDeleteProgram(program);

	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
	if (inPos != -1) glDeleteBuffers(1, &posVBO);
	if (inColor != -1) glDeleteBuffers(1, &colorVBO);
	if (inNormal != -1) glDeleteBuffers(1, &normalVBO);
	if (inTexCoord != -1) glDeleteBuffers(1, &texCoordVBO);
	glDeleteBuffers(1, &triangleIndexVBO);
	glBindVertexArray(0);
	glDeleteVertexArrays(1, &vao);

	glDeleteTextures(1, &colorTexId);
	glDeleteTextures(1, &emiTexId);

	delete malla;


}
void initShader(const char *vname, const char *fname)
{
	vshader = loadShader(vname, GL_VERTEX_SHADER); 
	fshader = loadShader(fname, GL_FRAGMENT_SHADER);

	program = glCreateProgram(); 
	glAttachShader(program, vshader);
	glAttachShader(program, fshader);

	//Identificadores de los atributos
	glBindAttribLocation(program, 0, "inPos");
	glBindAttribLocation(program, 1, "inColor");
	glBindAttribLocation(program, 2, "inNormal");
	glBindAttribLocation(program, 3, "inTexCoord");

	glLinkProgram(program);

	int linked;
	glGetProgramiv(program, GL_LINK_STATUS, &linked);
	if (!linked) {
		//Calculamos una cadena de error
		GLint logLen;
		glGetProgramiv(program, GL_INFO_LOG_LENGTH, &logLen);
		char *logString = new char[logLen];
		glGetProgramInfoLog(program, logLen, NULL, logString);
		std::cout << "Error: " << logString << std::endl;
		delete logString;
		glDeleteProgram(program);
		exit (-1);
	}

	//Uniformes
	uNormalMat = glGetUniformLocation(program, "normal");
	uModelViewMat = glGetUniformLocation(program, "modelView");
	uModelViewProjMat = glGetUniformLocation(program, "modelViewProj");
	uColorTex = glGetUniformLocation(program, "colorTex");
	uEmiTex = glGetUniformLocation(program, "emiTex");


	inPos = glGetAttribLocation(program, "inPos");
	inColor = glGetAttribLocation(program, "inColor");
	inNormal = glGetAttribLocation(program, "inNormal");
	inTexCoord = glGetAttribLocation(program, "inTexCoord");

}
void initObj()
{
	malla = new Mesh("../meshes/statue.obj");

	glGenVertexArrays(1, &vao); 
	glBindVertexArray(vao);

	if (inPos != -1) //localizador de la posicion
	{
		glGenBuffers(1, &posVBO);
		glBindBuffer(GL_ARRAY_BUFFER, posVBO);
		//glBufferData(GL_ARRAY_BUFFER, cubeNVertex * sizeof(float) * 3,
		//	cubeVertexPos, GL_STATIC_DRAW);
		//glVertexAttribPointer(inPos, 3, GL_FLOAT, GL_FALSE, 0, 0); //vectores de 3, floats, no normalizar, strike y offset
		glBufferData(GL_ARRAY_BUFFER, malla->getNumVertex() * sizeof(float) * 3,
			malla->getVertexPos(), GL_STATIC_DRAW);
		glVertexAttribPointer(inPos, 3, GL_FLOAT, GL_FALSE, 0, 0); //vectores de 3, floats, no normalizar, strike y offset
		glEnableVertexAttribArray(inPos);
	}

	if (inColor != -1)
	{
		glGenBuffers(1, &colorVBO);
		glBindBuffer(GL_ARRAY_BUFFER, colorVBO);
		//glBufferData(GL_ARRAY_BUFFER, cubeNVertex * sizeof(float) * 3,
		//	cubeVertexColor, GL_STATIC_DRAW);
		//glVertexAttribPointer(inColor, 3, GL_FLOAT, GL_FALSE, 0, 0);
		glBufferData(GL_ARRAY_BUFFER, malla->getNumVertex() * sizeof(float) * 3,
			malla->getVertexColor(), GL_STATIC_DRAW);
		glVertexAttribPointer(inColor, 3, GL_FLOAT, GL_FALSE, 0, 0);
		glEnableVertexAttribArray(inColor);
	}
	if (inNormal != -1)
	{
		glGenBuffers(1, &normalVBO);
		glBindBuffer(GL_ARRAY_BUFFER, normalVBO);
		//glBufferData(GL_ARRAY_BUFFER, cubeNVertex * sizeof(float) * 3,
		//	cubeVertexNormal, GL_STATIC_DRAW);
		//glVertexAttribPointer(inNormal, 3, GL_FLOAT, GL_FALSE, 0, 0);
		glBufferData(GL_ARRAY_BUFFER, malla->getNumVertex() * sizeof(float) * 3,
			malla->getVertexNormals(), GL_STATIC_DRAW);
		glVertexAttribPointer(inNormal, 3, GL_FLOAT, GL_FALSE, 0, 0);
		glEnableVertexAttribArray(inNormal);
	}
	if (inTexCoord != -1)
	{
		glGenBuffers(1, &texCoordVBO);
		glBindBuffer(GL_ARRAY_BUFFER, texCoordVBO);
		//glBufferData(GL_ARRAY_BUFFER, cubeNVertex * sizeof(float) * 2,
		//	cubeVertexTexCoord, GL_STATIC_DRAW);
		//glVertexAttribPointer(inTexCoord, 2, GL_FLOAT, GL_FALSE, 0, 0);
		glBufferData(GL_ARRAY_BUFFER, malla->getNumVertex() * sizeof(float) * 2,
			malla->getVertexTexCoord(), GL_STATIC_DRAW);
		glVertexAttribPointer(inTexCoord, 2, GL_FLOAT, GL_FALSE, 0, 0);

		glEnableVertexAttribArray(inTexCoord);
	}

	glGenBuffers(1, &triangleIndexVBO);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, triangleIndexVBO);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER,
		malla->getNumVertex() * sizeof(unsigned int) * 3, malla->getTriangleIndex(),
		GL_STATIC_DRAW);

	//Cargamos las texturas
	//colorTexId = loadTex("../img/color2.png");
	//emiTexId = loadTex("../img/emissive.png");

	colorTexId = loadTex("../meshes/color.jpg");
	emiTexId = loadTex("../img/emissive.png");

	


	model = glm::mat4(1.0f);
}

GLuint loadShader(const char *fileName, GLenum type)
{
	unsigned int fileLen; 
	char *source = loadStringFromFile(fileName, fileLen); 

	////////////////////////////////////////////// 
	//Creación y compilación del Shader 
	GLuint shader;
	shader = glCreateShader(type);
	glShaderSource(shader, 1, (const GLchar **)&source, (const GLint *)&fileLen);
	glCompileShader(shader); 
	delete source;

	//Comprobamos que se compiló bien 
	GLint compiled;
	glGetShaderiv(shader, GL_COMPILE_STATUS, &compiled); 
	if (!compiled) 
	{ 
		//Calculamos una cadena de error 
		GLint logLen; 
		glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &logLen); 
		char *logString = new char[logLen];
		glGetShaderInfoLog(shader, logLen, NULL, logString);
		std::cout << "Error(" << fileName << "): " << logString << std::endl;
		delete logString;
		glDeleteShader(shader); 
		exit (-1); 
	}

	return shader;
}
unsigned int loadTex(const char *fileName)
{ 
	unsigned char *map;
	unsigned int w, h;
	map = loadTexture(fileName, w, h);
	if (!map)
	{
		std::cout << "Error cargando el fichero: "
			<< fileName << std::endl;
		exit(-1);
	}

	unsigned int texId;
	glGenTextures(1, &texId);
	glBindTexture(GL_TEXTURE_2D, texId);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, w, h, 0, GL_RGBA,
		GL_UNSIGNED_BYTE, (GLvoid*)map);


	delete[] map;

	glGenerateMipmap(GL_TEXTURE_2D); //Generar los midmaps a partir de level 0

	//Filtrado trilineal
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,
		GL_LINEAR_MIPMAP_LINEAR);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);//glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);//glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);

	return texId;

}

void renderFunc()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glUseProgram(program); 
	

	//TODO: aqui van cosas!!!! (pintado y eso)
	glm::mat4 modelView = view * model;
	glm::mat4 modelViewProj = proj * view * model;
	glm::mat4 normal = glm::transpose(glm::inverse(modelView));
	if (uModelViewMat != -1)
		glUniformMatrix4fv(uModelViewMat, 1, GL_FALSE,
			&(modelView[0][0]));
	if (uModelViewProjMat != -1)
		glUniformMatrix4fv(uModelViewProjMat, 1, GL_FALSE,
			&(modelViewProj[0][0]));
	if (uNormalMat != -1)
		glUniformMatrix4fv(uNormalMat, 1, GL_FALSE,
			&(normal[0][0]));


	//Texturas
	if (uColorTex != -1)
	{
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, colorTexId);
		glUniform1i(uColorTex, 0);
	}
	if (uEmiTex != -1)
	{
		glActiveTexture(GL_TEXTURE0 + 1);
		glBindTexture(GL_TEXTURE_2D, emiTexId);
		glUniform1i(uEmiTex, 1);
	}


	glBindVertexArray(vao);
	//glDrawElements(GL_TRIANGLES, cubeNTriangleIndex * 3,
	//	GL_UNSIGNED_INT, (void*)0);
	glDrawElements(GL_TRIANGLES, malla->getNumTriangles() * 3,
		GL_UNSIGNED_INT, (void*)0);

	//TODO: aqui llamar a la funcion de carga desde fichero

	glUseProgram(NULL);

	
	glutSwapBuffers();
}
void resizeFunc(int width, int height)
{
	//Actualizar el viweport cuando cambie la ventana
	glViewport(0, 0, width, height);

	glutPostRedisplay(); //Forzar que se planifique un evento de renderizado por si acaso (deberia hacerse igualmente)


}
void idleFunc()
{
	//Animar el modelo
	model = glm::mat4(1.0f);
	static float angle = 0.0f;
	angle = (angle > 3.141592f * 2.0f) ? 0 : angle + 0.01f;
	model = glm::rotate(model, angle, glm::vec3(1.0f, 1.0f, 0.0f));

	glutPostRedisplay();

}
void keyboardFunc(unsigned char key, int x, int y)
{
	std::cout << "Se ha pulsado la tecla " << key << std::endl << std::endl;

	glm::vec3 forwardDirection = glm::vec3(0.0f);

	forwardDirection.x = -sinf(pitch);
	forwardDirection.y = sinf(yaw);
	forwardDirection.z = cosf(pitch);

	forwardDirection = glm::normalize(forwardDirection);


	float forward = 0.0f;
	float horizontal = 0.0f;
	glm::vec3 horizontalDirection = glm::cross(forwardDirection, glm::vec3(0.0f, -1.0f, 0.0f));

	bool translate = true; //Si no se usa este booleano, los cálculos de vectores fallarán y darán errores
	switch (key)
	{

	case 's':
		forward = -1.0f;
		break;

	case 'w':
		forward = 1.0f;
		break;

	case 'd':
		horizontal = -1.0f;
		break;

	case 'a':
		horizontal = 1.0f;
		break;

	case 'r':
		orbital = !orbital;
		translate = false;
		translation = glm::vec3(0.0f);
		translation.z = -7.0f;
		pitch = 0.0f;
		yaw = 0.0f;
		break;

	default:
		translate = false;
		break;
	}
	if (translate)
	{
		forwardDirection *= forward;
		horizontalDirection *= horizontal;
		glm::vec3 finalDirection = forwardDirection + horizontalDirection;
		finalDirection = glm::normalize(finalDirection);
		finalDirection *= cameraSpeed;
		translation += finalDirection;
	}

	view = glm::mat4(1.0f);

	if (!orbital)
	{
		view = glm::rotate(view, yaw, glm::vec3(1.0f, 0.0f, 0.0f));
		view = glm::rotate(view, pitch, glm::vec3(0.0f, 1.0f, 0.0f));

		view = glm::translate(view, translation);
	}
	else
	{
		view = glm::translate(view, translation);
		view = glm::rotate(view, yaw, glm::vec3(1.0f, 0.0f, 0.0f));
		view = glm::rotate(view, pitch, glm::vec3(0.0f, 1.0f, 0.0f));
	}


}
void mouseFunc(int button, int state, int x, int y)
{

	if (state == 0) {
#if DEBUG_TEXT
		std::cout << "Se ha pulsado el botón ";
#endif
		if (button == 0)
		{
			oldX = x;
			oldY = y;
		}
	}

	else {
#if DEBUG_TEXT
		std::cout << "Se ha soltado el botón ";
#endif

		if (button == 0)
		{
			oldX = x;
			oldY = y;
		}

	}

#if DEBUG_TEXT
	if (button == 0) std::cout << "de la izquierda del ratón " << std::endl;
	if (button == 1) std::cout << "central del ratón " << std::endl;
	if (button == 2) std::cout << "de la derecha del ratón " << std::endl;

	std::cout << "en la posición " << x << " " << y << std::endl << std::endl;
#endif
}

void mouseMotionFunc(int x, int y)
{

#if DEBUG_TEXT
	std::cout << "Moviendo hacia ";

	if (oldX < x) {

		std::cout << "derecha";

	}
	else if (oldX > x)
	{
		std::cout << "izquierda";
	}
#endif

	if (x != oldX)
		pitch += (float)(x - oldX) * mouseSensibility * ((invertMouse) ? -1.0f : 1.0f);

#if DEBUG_TEXT
	std::cout << "  -  ";

	if (oldY < y) std::cout << "abajo";
	else if (oldY > y) std::cout << "arriba";

#endif

	if (y != oldY)
		yaw += (float)(y - oldY) * mouseSensibility * ((invertMouse) ? -1.0f : 1.0f);

	if (yaw > maxYawAngle)
		yaw = maxYawAngle;

	if (yaw + 3.14159f < minYawAngle)
		yaw = minYawAngle - 3.14159f;
	oldX = x; oldY = y;

#if DEBUG_TEXT
	std::cout << "Pitch: " << pitch << " Yaw: " << yaw + 3.14159f << std::endl;

	std::cout << std::endl;
#endif


	view = glm::mat4(1.0f);

	if (!orbital)
	{
		view = glm::rotate(view, yaw, glm::vec3(1.0f, 0.0f, 0.0f));
		view = glm::rotate(view, pitch, glm::vec3(0.0f, 1.0f, 0.0f));

		view = glm::translate(view, translation);
	}
	else
	{
		view = glm::translate(view, translation);
		view = glm::rotate(view, yaw, glm::vec3(1.0f, 0.0f, 0.0f));
		view = glm::rotate(view, pitch, glm::vec3(0.0f, 1.0f, 0.0f));
	}


	//IGlib::setViewMat(view);
}
